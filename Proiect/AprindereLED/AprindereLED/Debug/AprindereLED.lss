
AprindereLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000af8  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ad  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003dc  00000000  00000000  0000176d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b4  00000000  00000000  00001bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000020b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000020f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_11>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  d4:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <intializare>:
#include <avr/io.h>
#include "LED.h"

void intializare()
{
	DDRD |= 0x08;
  dc:	53 9a       	sbi	0x0a, 3	; 10
  de:	08 95       	ret

000000e0 <main>:
#include <time.h>
#include <avr/interrupt.h>

int main(void)
{
	intializare();
  e0:	0e 94 6e 00 	call	0xdc	; 0xdc <intializare>
	timer1_1s();
  e4:	0e 94 75 00 	call	0xea	; 0xea <timer1_1s>
		/*aprinde_led();
		_delay_ms(1500);
		stinge_led();
		_delay_ms(1500);*/
		//ISR(TIMER1_COMPA_vect)
    }
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <main+0x8>

000000ea <timer1_1s>:

int intrerupere = 0;

void timer1_1s()
{
	cli(); //stop intreruperi
  ea:	f8 94       	cli

	/* Setare timer care sa genereze o intrerupere la 1s */
	//set timer1 interrupt at 1Hz
	TCCR1A = 0;// setare tot registrul TCCR1A pe 0
  ec:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0;// setare tot registrul TCCR1B pe 0
  f0:	e1 e8       	ldi	r30, 0x81	; 129
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	10 82       	st	Z, r1
	
	//timmer/counter register, contine valoarea timer-ului
	TCNT1  = 0;//initilizare contor cu 0
  f6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  fa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	// setare registru comparare pentru incrementearea cu 1hz
	// output compare register
	OCR1A = 15624;
  fe:	88 e0       	ldi	r24, 0x08	; 8
 100:	9d e3       	ldi	r25, 0x3D	; 61
 102:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 106:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	// = (16*10^6) / (1*1024) - 1 (must be <65536)
	// pornire mod CTC
	TCCR1B |= (1 << WGM12);
 10a:	80 81       	ld	r24, Z
 10c:	88 60       	ori	r24, 0x08	; 8
 10e:	80 83       	st	Z, r24
	// Setare biti CS10 si CS12 pentru de prescaler 1024
	TCCR1B |= (1 << CS12) | (1 << CS10);
 110:	80 81       	ld	r24, Z
 112:	85 60       	ori	r24, 0x05	; 5
 114:	80 83       	st	Z, r24
	// permite intreruperi timer compare
	TIMSK1 |= (1 << OCIE1A);
 116:	ef e6       	ldi	r30, 0x6F	; 111
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	82 60       	ori	r24, 0x02	; 2
 11e:	80 83       	st	Z, r24

	sei(); //da drumul la intreruperi
 120:	78 94       	sei
 122:	08 95       	ret

00000124 <__vector_11>:
}

ISR(TIMER1_COMPA_vect)
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
	//timerul1 genereaza o intrerupere la toggle 1Hz
	//generates pulse wave of frequency 1Hz/2 = 0.5kHz (takes two cycles for full wave- toggle high then toggle low)
	if (intrerupere)
 132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 136:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 13a:	89 2b       	or	r24, r25
 13c:	31 f0       	breq	.+12     	; 0x14a <__vector_11+0x26>
	{
		PORTD |= LEDS;
 13e:	5b 9a       	sbi	0x0b, 3	; 11
		intrerupere = 0;
 140:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 144:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 148:	07 c0       	rjmp	.+14     	; 0x158 <__vector_11+0x34>
	}
	else
	{
		PORTD &=~(LEDS);
 14a:	5b 98       	cbi	0x0b, 3	; 11
		intrerupere = 1;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 154:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
}
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
