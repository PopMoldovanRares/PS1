
segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f5  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067f  00000000  00000000  000009f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a1  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  0000151c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000357  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000070  00000000  00000000  0000195b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>
#include "segment.h"

int main(void)
{
	initializare_segment();
  80:	0e 94 45 00 	call	0x8a	; 0x8a <initializare_segment>
	//nr1();
    /* Replace with your application code */
    while (1) 
    {
	
		  nr2();
  84:	0e 94 4d 00 	call	0x9a	; 0x9a <nr2>
		   _delay_ms(10000);
		  nr8();
		   _delay_ms(10000);
		  nr9();
		  _delay_ms(10000);*/
    }
  88:	fd cf       	rjmp	.-6      	; 0x84 <main+0x4>

0000008a <initializare_segment>:
	
	PORTD &=~a;
	PORTD &=~d;
	PORTD &=~e;
	PORTD &=~f;
	PORTD &=~g;
  8a:	56 9a       	sbi	0x0a, 6	; 10
  8c:	57 9a       	sbi	0x0a, 7	; 10
  8e:	52 9a       	sbi	0x0a, 2	; 10
  90:	51 9a       	sbi	0x0a, 1	; 10
  92:	50 9a       	sbi	0x0a, 0	; 10
  94:	55 9a       	sbi	0x0a, 5	; 10
  96:	54 9a       	sbi	0x0a, 4	; 10
  98:	08 95       	ret

0000009a <nr2>:
}

void nr2()
{
	PORTD |= a;
  9a:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD |= b;
  9c:	5f 9a       	sbi	0x0b, 7	; 11
	PORTD |= g;
  9e:	5c 9a       	sbi	0x0b, 4	; 11
	PORTD |= e;
  a0:	58 9a       	sbi	0x0b, 0	; 11
	PORTD |= d;
  a2:	59 9a       	sbi	0x0b, 1	; 11
	
	PORTD &=~f;
  a4:	5d 98       	cbi	0x0b, 5	; 11
	PORTD &=~c;
  a6:	5a 98       	cbi	0x0b, 2	; 11
  a8:	08 95       	ret

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
